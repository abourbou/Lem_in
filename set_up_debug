


je laisse ca la au cas ou ^^



// TODO : SBR - kick ca a la fin
void	print_flow(t_flow *flow)
{
	// int y = 1;
	// for (t_dlist *cursor = flow->l_path; cursor; cursor = cursor->next)
	// {
	// 	int i = 0;
	// 	y++;
	// 	t_path	*current = cursor->content;
	// 	for (t_dlist *lst_room = current->l_start; lst_room ; lst_room = lst_room->next)
	// 	{
	// 		t_node *room = lst_room->content;
	// 		printf("Room %d : %s have and num %d\n", i, room->name, room->ant_nb);
	// 		i++;
	// 	}
	// 	puts("");
	// }

	int y = 1;
	for (t_dlist *cursor = flow->l_path; cursor; cursor = cursor->next)
	{
		int i = 0;
		y++;
		t_path	*current = cursor->content;
		for (t_dlist *lst_room = current->l_end; lst_room ; lst_room = lst_room->prev)
		{
			t_node *room = lst_room->content;
			printf("Room %d : %s have and num %d\n", i, room->name, room->ant_nb);
			i++;
		}
		puts("");
	}
}





///////////////////////////**************************************//////////////////////////////
///////////////////////////**************************************//////////////////////////////
///////////////////////////**************************************//////////////////////////////
///////////////////////////**************************************//////////////////////////////
///////////////////////////**************************************//////////////////////////////


	t_flow flow;
	// t_flow flow2;
	// t_flow flow3;

	t_node	start0;
	t_node	node1;
	t_node	node2;
	t_node	node3;
	t_node	node4;
	t_node	node5;
	t_node	node6;
	t_node	node7;
	t_node	node8;
	t_node	node9;
	t_node	node10;
	t_node	end;

	start0.name = "0";
	node1.name = "1";
	node2.name = "2";
	node3.name = "3";
	node4.name = "node 4";
	node5.name = "node 5";
	node6.name = "node 6";
	node7.name = "node 7";
	node8.name = "node 8";
	node9.name = "node 9";
	node10.name = "node 10";
	end.name = "4";

	start0.ant_nb = 0;
	node1.ant_nb = 0;
	node2.ant_nb = 0;
	node3.ant_nb = 0;
	node4.ant_nb = 0;
	node5.ant_nb = 0;
	node6.ant_nb = 0;
	node7.ant_nb = 0;
	node8.ant_nb = 0;
	node9.ant_nb = 0;
	node10.ant_nb = 0;
	end.ant_nb = 0;


	t_path	path1;
	t_path	path2;
	t_path	path3;
	t_path	path4;
	t_path	path5;
	t_path	path6;

	path1.l_end = NULL;
	path2.l_end = NULL;
	path3.l_end = NULL;
	path4.l_end = NULL;
	path5.l_end = NULL;
	path6.l_end = NULL;

	path1.l_start = dlist_new(&start0);
	path1.l_end = path1.l_start;
	dlist_pushback(&path1.l_end, dlist_new(&node1));
	// dlist_pushback(&path1.l_end, dlist_new(&node2));
	dlist_pushback(&path1.l_end, dlist_new(&end));

	path2.l_start = dlist_new(&node1);
	path2.l_end = path2.l_start;
	// dlist_pushback(&path2.l_end, dlist_new(&node1));
	dlist_pushback(&path2.l_end, dlist_new(&end));

	path3.l_start = dlist_new(&node2);
	path3.l_end = path3.l_start;
	// dlist_pushback(&path3.l_end, dlist_new(&node2));
	dlist_pushback(&path3.l_end, dlist_new(&node3));
	// // dlist_pushback(&path3.l_end, dlist_new(&node4));
	dlist_pushback(&path3.l_end, dlist_new(&end));

	path4.l_start = dlist_new(&start0);
	path4.l_end = path4.l_start;
	dlist_pushback(&path4.l_end, dlist_new(&node1));
	dlist_pushback(&path4.l_end, dlist_new(&node2));
	dlist_pushback(&path4.l_end, dlist_new(&end));

	path5.l_start = dlist_new(&start0);
	path5.l_end = path5.l_start;
	dlist_pushback(&path5.l_end, dlist_new(&node3));
	dlist_pushback(&path5.l_end, dlist_new(&node4));
	dlist_pushback(&path5.l_end, dlist_new(&node5));
	dlist_pushback(&path5.l_end, dlist_new(&node6));
	dlist_pushback(&path5.l_end, dlist_new(&end));

	path6.l_start = dlist_new(&start0);
	path6.l_end = path6.l_start;
	dlist_pushback(&path6.l_end, dlist_new(&node6));
	dlist_pushback(&path6.l_end, dlist_new(&node7));
	dlist_pushback(&path6.l_end, dlist_new(&node8));
	dlist_pushback(&path6.l_end, dlist_new(&node9));
	dlist_pushback(&path6.l_end, dlist_new(&node10));
	dlist_pushback(&path6.l_end, dlist_new(&end));

	path1.length = dlist_compt(path1.l_start);
	path2.length = dlist_compt(path2.l_start);
	path3.length = dlist_compt(path3.l_start);
	path4.length = dlist_compt(path4.l_start);
	path5.length = dlist_compt(path5.l_start);
	path6.length = dlist_compt(path6.l_start);
	path1.nbr_ants = 0;
	path2.nbr_ants = 0;
	path3.nbr_ants = 0;
	path4.nbr_ants = 0;
	path5.nbr_ants = 0;
	path6.nbr_ants = 0;
	path1.capacity = path1.length;
	path2.capacity = path2.length;
	path3.capacity = path3.length;
	path4.capacity = path4.length;
	path5.capacity = path5.length;
	path6.capacity = path6.length;

	// flow.t_path = dlist_new(&path1);

	flow.t_path = dlist_new(&path2);
	flow.t_path->next = dlist_new(&path3);
	flow.t_path->next->next = NULL;

	// flow2.t_path = dlist_new(&path2);
	// flow2.t_path->next = dlist_new(&path3);
	// flow2.t_path->next->next = NULL;

	// flow3.t_path = dlist_new(&path4);
	// flow3.t_path->next = dlist_new(&path5);
	// flow3.t_path->next->next = dlist_new(&path6);

	t_dlist	*elem;
	t_dlist	*temp;
	int		i;

	i = 0;
	elem = flow.t_path;
	while (elem)
	{
		if (i != 0)
			elem->prev = temp;
		temp = elem;
		elem = elem->next;
		i++;
	}

	print_flow(&flow);
/***********************************************************/
/***********************************************************/
/***********************************************************/
/***********************************************************/
